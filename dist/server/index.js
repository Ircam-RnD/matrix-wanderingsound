'use strict';

require('source-map-support/register');

var _server = require('soundworks/server');

var soundworks = _interopRequireWildcard(_server);

var _SoundfieldExperience = require('./SoundfieldExperience');

var _SoundfieldExperience2 = _interopRequireDefault(_SoundfieldExperience);

var _default = require('./config/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// enable source-maps in node
var config = null;
// import soundworks (server-side) and experience


switch (process.env.ENV) {
  default:
    config = _default2.default;
    break;
}

// configure express environment ('production' enables cache systems)
process.env.NODE_ENV = config.env;

// initialize application with configuration options
soundworks.server.init(config);

// define the configuration object to be passed to the `.ejs` template
soundworks.server.setClientConfigDefinition(function (clientType, config, httpRequest) {
  return {
    clientType: clientType,
    env: config.env,
    socketIO: config.socketIO,
    appName: config.appName,
    version: config.version,
    defaultType: config.defaultClient,
    assetsDomain: config.assetsDomain
  };
});

// create the common server experience for both the soloists and the players
var soundfieldExperience = new _SoundfieldExperience2.default(['player', 'soloist']);

// start the application
soundworks.server.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNvdW5kd29ya3MiLCJjb25maWciLCJwcm9jZXNzIiwiZW52IiwiRU5WIiwiTk9ERV9FTlYiLCJzZXJ2ZXIiLCJpbml0Iiwic2V0Q2xpZW50Q29uZmlnRGVmaW5pdGlvbiIsImNsaWVudFR5cGUiLCJodHRwUmVxdWVzdCIsInNvY2tldElPIiwiYXBwTmFtZSIsInZlcnNpb24iLCJkZWZhdWx0VHlwZSIsImRlZmF1bHRDbGllbnQiLCJhc3NldHNEb21haW4iLCJzb3VuZGZpZWxkRXhwZXJpZW5jZSIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUVBOztJQUFZQSxVOztBQUNaOzs7O0FBQ0E7Ozs7Ozs7O0FBTEE7QUFPQSxJQUFJQyxTQUFTLElBQWI7QUFMQTs7O0FBT0EsUUFBT0MsUUFBUUMsR0FBUixDQUFZQyxHQUFuQjtBQUNFO0FBQ0VIO0FBQ0E7QUFISjs7QUFNQTtBQUNBQyxRQUFRQyxHQUFSLENBQVlFLFFBQVosR0FBdUJKLE9BQU9FLEdBQTlCOztBQUVBO0FBQ0FILFdBQVdNLE1BQVgsQ0FBa0JDLElBQWxCLENBQXVCTixNQUF2Qjs7QUFFQTtBQUNBRCxXQUFXTSxNQUFYLENBQWtCRSx5QkFBbEIsQ0FBNEMsVUFBQ0MsVUFBRCxFQUFhUixNQUFiLEVBQXFCUyxXQUFyQixFQUFxQztBQUMvRSxTQUFPO0FBQ0xELGdCQUFZQSxVQURQO0FBRUxOLFNBQUtGLE9BQU9FLEdBRlA7QUFHTFEsY0FBVVYsT0FBT1UsUUFIWjtBQUlMQyxhQUFTWCxPQUFPVyxPQUpYO0FBS0xDLGFBQVNaLE9BQU9ZLE9BTFg7QUFNTEMsaUJBQWFiLE9BQU9jLGFBTmY7QUFPTEMsa0JBQWNmLE9BQU9lO0FBUGhCLEdBQVA7QUFTRCxDQVZEOztBQVlBO0FBQ0EsSUFBTUMsdUJBQXVCLG1DQUF5QixDQUFDLFFBQUQsRUFBVyxTQUFYLENBQXpCLENBQTdCOztBQUVBO0FBQ0FqQixXQUFXTSxNQUFYLENBQWtCWSxLQUFsQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGVuYWJsZSBzb3VyY2UtbWFwcyBpbiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG4vLyBpbXBvcnQgc291bmR3b3JrcyAoc2VydmVyLXNpZGUpIGFuZCBleHBlcmllbmNlXG5pbXBvcnQgKiBhcyBzb3VuZHdvcmtzIGZyb20gJ3NvdW5kd29ya3Mvc2VydmVyJztcbmltcG9ydCBTb3VuZGZpZWxkRXhwZXJpZW5jZSBmcm9tICcuL1NvdW5kZmllbGRFeHBlcmllbmNlJztcbmltcG9ydCBkZWZhdWx0Q29uZmlnIGZyb20gJy4vY29uZmlnL2RlZmF1bHQnO1xuXG5sZXQgY29uZmlnID0gbnVsbDtcblxuc3dpdGNoKHByb2Nlc3MuZW52LkVOVikge1xuICBkZWZhdWx0OlxuICAgIGNvbmZpZyA9IGRlZmF1bHRDb25maWc7XG4gICAgYnJlYWs7XG59XG5cbi8vIGNvbmZpZ3VyZSBleHByZXNzIGVudmlyb25tZW50ICgncHJvZHVjdGlvbicgZW5hYmxlcyBjYWNoZSBzeXN0ZW1zKVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSBjb25maWcuZW52O1xuXG4vLyBpbml0aWFsaXplIGFwcGxpY2F0aW9uIHdpdGggY29uZmlndXJhdGlvbiBvcHRpb25zXG5zb3VuZHdvcmtzLnNlcnZlci5pbml0KGNvbmZpZyk7XG5cbi8vIGRlZmluZSB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIHRoZSBgLmVqc2AgdGVtcGxhdGVcbnNvdW5kd29ya3Muc2VydmVyLnNldENsaWVudENvbmZpZ0RlZmluaXRpb24oKGNsaWVudFR5cGUsIGNvbmZpZywgaHR0cFJlcXVlc3QpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRUeXBlOiBjbGllbnRUeXBlLFxuICAgIGVudjogY29uZmlnLmVudixcbiAgICBzb2NrZXRJTzogY29uZmlnLnNvY2tldElPLFxuICAgIGFwcE5hbWU6IGNvbmZpZy5hcHBOYW1lLFxuICAgIHZlcnNpb246IGNvbmZpZy52ZXJzaW9uLFxuICAgIGRlZmF1bHRUeXBlOiBjb25maWcuZGVmYXVsdENsaWVudCxcbiAgICBhc3NldHNEb21haW46IGNvbmZpZy5hc3NldHNEb21haW4sXG4gIH07XG59KTtcblxuLy8gY3JlYXRlIHRoZSBjb21tb24gc2VydmVyIGV4cGVyaWVuY2UgZm9yIGJvdGggdGhlIHNvbG9pc3RzIGFuZCB0aGUgcGxheWVyc1xuY29uc3Qgc291bmRmaWVsZEV4cGVyaWVuY2UgPSBuZXcgU291bmRmaWVsZEV4cGVyaWVuY2UoWydwbGF5ZXInLCAnc29sb2lzdCddKTtcblxuLy8gc3RhcnQgdGhlIGFwcGxpY2F0aW9uXG5zb3VuZHdvcmtzLnNlcnZlci5zdGFydCgpO1xuIl19