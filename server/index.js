// Import external libraries
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

// Import Soundworks library modules (server side)

var _soundworksServer = require('soundworks/server');

// Import Soundfield modules (server side)

var _PlayerPerformanceJs = require('./PlayerPerformance.js');

var _PlayerPerformanceJs2 = _interopRequireDefault(_PlayerPerformanceJs);

var _SoloistPerformanceJs = require('./SoloistPerformance.js');

var _SoloistPerformanceJs2 = _interopRequireDefault(_SoloistPerformanceJs);

// Instantiate the modules
var express = require('express');
var path = require('path');var setup = new _soundworksServer.Setup();
setup.generate('surface', { height: 1, width: 1 });
var locator = new _soundworksServer.Locator({ setup: setup });
var playerPerformance = new _PlayerPerformanceJs2['default']();
var soloistPerformance = new _SoloistPerformanceJs2['default'](playerPerformance, setup);

// Launch server
var app = express();
var dir = path.join(process.cwd(), 'public');
_soundworksServer.server.start(app, dir, process.env.PORT || 3000);

// Map modules to client types:
// - the `'player'` clients need to communicate with the `setup`, the `locator`
//   and the `playerPerformance` on the server side;
// - the `'soloist'` clients need to communicate with the `setup` and the
//   `soloistPerformance` on the server side.
_soundworksServer.server.map('player', setup, locator, playerPerformance);
_soundworksServer.server.map('soloist', setup, soloistPerformance);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2JpL0Rldi9jb2xsZWN0aXZlLXNvdW5kd29ya3MtZGV2ZWxvcC9zb3VuZGZpZWxkL3NyYy9zZXJ2ZXIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztnQ0FLdUMsbUJBQW1COzs7O21DQUc1Qix3QkFBd0I7Ozs7b0NBQ3ZCLHlCQUF5Qjs7Ozs7QUFSeEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxBQVU3QixJQUFNLEtBQUssR0FBRyw2QkFBVyxDQUFDO0FBQzFCLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuRCxJQUFNLE9BQU8sR0FBRyw4QkFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzlDLElBQU0saUJBQWlCLEdBQUcsc0NBQXVCLENBQUM7QUFDbEQsSUFBTSxrQkFBa0IsR0FBRyxzQ0FBdUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7OztBQUc1RSxJQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMvQyx5QkFBTyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQzs7Ozs7OztBQU9qRCx5QkFBTyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUN4RCx5QkFBTyxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9yb2JpL0Rldi9jb2xsZWN0aXZlLXNvdW5kd29ya3MtZGV2ZWxvcC9zb3VuZGZpZWxkL3NyYy9zZXJ2ZXIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnQgZXh0ZXJuYWwgbGlicmFyaWVzXG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLy8gSW1wb3J0IFNvdW5kd29ya3MgbGlicmFyeSBtb2R1bGVzIChzZXJ2ZXIgc2lkZSlcbmltcG9ydCB7IHNlcnZlciwgTG9jYXRvciwgU2V0dXAgfSBmcm9tICdzb3VuZHdvcmtzL3NlcnZlcic7XG5cbi8vIEltcG9ydCBTb3VuZGZpZWxkIG1vZHVsZXMgKHNlcnZlciBzaWRlKVxuaW1wb3J0IFBsYXllclBlcmZvcm1hbmNlIGZyb20gJy4vUGxheWVyUGVyZm9ybWFuY2UuanMnO1xuaW1wb3J0IFNvbG9pc3RQZXJmb3JtYW5jZSBmcm9tICcuL1NvbG9pc3RQZXJmb3JtYW5jZS5qcyc7XG5cbi8vIEluc3RhbnRpYXRlIHRoZSBtb2R1bGVzXG5jb25zdCBzZXR1cCA9IG5ldyBTZXR1cCgpO1xuc2V0dXAuZ2VuZXJhdGUoJ3N1cmZhY2UnLCB7IGhlaWdodDogMSwgd2lkdGg6IDEgfSk7XG5jb25zdCBsb2NhdG9yID0gbmV3IExvY2F0b3IoeyBzZXR1cDogc2V0dXAgfSk7XG5jb25zdCBwbGF5ZXJQZXJmb3JtYW5jZSA9IG5ldyBQbGF5ZXJQZXJmb3JtYW5jZSgpO1xuY29uc3Qgc29sb2lzdFBlcmZvcm1hbmNlID0gbmV3IFNvbG9pc3RQZXJmb3JtYW5jZShwbGF5ZXJQZXJmb3JtYW5jZSwgc2V0dXApO1xuXG4vLyBMYXVuY2ggc2VydmVyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBkaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3B1YmxpYycpO1xuc2VydmVyLnN0YXJ0KGFwcCwgZGlyLCBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApO1xuXG4vLyBNYXAgbW9kdWxlcyB0byBjbGllbnQgdHlwZXM6XG4vLyAtIHRoZSBgJ3BsYXllcidgIGNsaWVudHMgbmVlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBgc2V0dXBgLCB0aGUgYGxvY2F0b3JgXG4vLyAgIGFuZCB0aGUgYHBsYXllclBlcmZvcm1hbmNlYCBvbiB0aGUgc2VydmVyIHNpZGU7XG4vLyAtIHRoZSBgJ3NvbG9pc3QnYCBjbGllbnRzIG5lZWQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgYHNldHVwYCBhbmQgdGhlXG4vLyAgIGBzb2xvaXN0UGVyZm9ybWFuY2VgIG9uIHRoZSBzZXJ2ZXIgc2lkZS5cbnNlcnZlci5tYXAoJ3BsYXllcicsIHNldHVwLCBsb2NhdG9yLCBwbGF5ZXJQZXJmb3JtYW5jZSk7XG5zZXJ2ZXIubWFwKCdzb2xvaXN0Jywgc2V0dXAsIHNvbG9pc3RQZXJmb3JtYW5jZSk7XG4iXX0=